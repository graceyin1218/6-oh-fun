from le import solve_equations

class OnePort:
    def __init__(self, e1, e2, i):
        self.e1 = e1
        self.e2 = e2
        self.i = i

class VSrc(OnePort):
    def __init__(self, v0, e1, e2, i):
        OnePort.__init__(self,e1,e2,i)
        #pass #Your Code Here
        self.equation = [(1, e1), (-1, e2), (-v0, None)]

class ISrc(OnePort):
    def __init__(self, i0, e1, e2, i):
        OnePort.__init__(self,e1,e2,i)
        #pass #Your Code Here
        self.equation = [(1, i), (-i0, None)]

class Resistor(OnePort):
    def __init__(self, r, e1, e2, i):
        OnePort.__init__(self,e1,e2,i)
        #pass #Your Code Here
        self.equation = [(1, e1), (-1, e2), (-r, i)]


#SOLVING CIRCUITS

def flatten_list(l):
    out = []
    for i in l:
        if type(i) == list:
            out.extend(flatten_list(i))
        else:
            out.append(i)
    return out

def solve_circuit(component_list, GND):
    # flatten_list is necessary for lists that contain two-ports.
    # It has no effect on lists that contain just one-ports.
    # Do not remove the following line.
    component_list = flatten_list(component_list)

    eqns = []
    
    #component equations
    for component in component_list:
        eqns.append(component.equation)
    
    #KCL equations
    nodes = []
    for component in component_list:
        if component.e1 not in nodes:
            nodes.append(component.e1)
        if component.e2 not in nodes:
            nodes.append(component.e2)
            
    for node in nodes:
        if node == GND:
            continue
        kcl = []
        for component in component_list:
            if node == component.e1:
                kcl.append((-1, component.i))
            if node == component.e2:
                kcl.append((1, component.i))
        eqns.append(kcl)
    
    #ground equation
    eqns.append([(1, GND)])
    
    return solve_equations(eqns, verbose = False)

def potentiometer(rp, alpha, e1, e2, e3, i1, i2):
    a = Resistor(rp*(1-alpha), e1, e2, i1)
    b = Resistor(rp*alpha, e2, e3, i2)
    return [a,b]



# alphas = [0.9036, 0.4054, 0.1835, 0.5474, 0.6434, 0.3166, 0.9515, 0.8521, 0.781, 0.8313, 0.6844, 0.8002, 0.2142, 0.1038, 0.9539, 0.8434, 0.1269, 0.9698, 0.0177, 0.959, 0.5919, 0.3024, 0.3482, 0.0437, 0.5219, 0.5945, 0.9942, 0.9003, 0.3134, 0.1631, 0.0632, 0.0667, 0.1168, 0.471, 0.1344, 0.1336, 0.9562, 0.5195, 0.005, 0.4028, 0.1171, 0.554, 0.0648, 0.0678, 0.5935, 0.2266, 0.2294, 0.7466, 0.6165, 0.0315, 0.1933, 0.8924, 0.6206, 0.3209, 0.3483, 0.9712, 0.5295, 0.8899, 0.8543, 0.7827, 0.733, 0.3658, 0.5626, 0.3761, 0.9548, 0.2922, 0.4067, 0.4528, 0.1765, 0.2297, 0.5884, 0.3458, 0.9064, 0.3118, 0.36, 0.4881, 0.4345, 0.7358, 0.9558, 0.8328, 0.2643, 0.8621, 0.4255, 0.339, 0.2428, 0.4811, 0.0236, 0.5323, 0.009, 0.8141, 0.3391, 0.1926, 0.4722, 0.0542, 0.0355, 0.0206, 0.9531, 0.39, 0.0293, 0.3116, 0.9639, 0.8512, 0.7109, 0.1109, 0.0607, 0.9628, 0.9212, 0.0086, 0.9444, 0.5349, 0.3334, 0.0286, 0.9338, 0.4849, 0.2428, 0.5967, 0.481, 0.673, 0.9877, 0.6584, 0.4038, 0.3193, 0.0033, 0.3851, 0.8133, 0.725, 0.8798, 0.7972, 0.6107, 0.7995, 0.7736, 0.7648, 0.5483, 0.0526, 0.9793, 0.9497, 0.5835, 0.8423, 0.2962, 0.577, 0.8692, 0.5996, 0.7891, 0.7799, 0.6894, 0.8507, 0.7091, 0.49, 0.4775, 0.7344, 0.0041, 0.9697, 0.8957, 0.2142, 0.325, 0.8221, 0.4404, 0.0791, 0.5982, 0.2511, 0.1618, 0.0104, 0.9729, 0.1924, 0.9488, 0.7425, 0.5418, 0.3434, 0.9177, 0.3056, 0.9457, 0.5079, 0.2291, 0.7586, 0.8075, 0.564, 0.0196, 0.8141, 0.8438, 0.533, 0.3822, 0.1459, 0.2933, 0.6559, 0.2269, 0.8892, 0.767, 0.1919, 0.8355, 0.8621, 0.1151, 0.8329, 0.9137, 0.4898, 0.753, 0.622, 0.0874, 0.2515, 0.5978, 0.9095, 0.0024, 0.2113, 0.3212, 0.0596, 0.0291, 0.7014, 0.5398, 0.3218, 0.0864, 0.2855, 0.6912, 0.6293, 0.09, 0.6671, 0.287, 0.9124, 0.9115, 0.2149, 0.2172, 0.5984, 0.4726, 0.4391, 0.1304, 0.4184, 0.6543, 0.3112, 0.7617, 0.6717, 0.4983, 0.8539, 0.4268, 0.2293, 0.198, 0.9703, 0.2467, 0.5214, 0.7767, 0.9563, 0.6576, 0.7865, 0.3054, 0.4235, 0.8426, 0.3997, 0.6244, 0.5996, 0.3782, 0.57, 0.706, 0.1322, 0.6594, 0.0409, 0.9773, 0.7167, 0.4783, 0.3941, 0.9369, 0.6717, 0.4775, 0.6093, 0.1322, 0.196, 0.2747, 0.6286, 0.8318, 0.7177, 0.4977, 0.5397, 0.6493, 0.8519, 0.336, 0.5768, 0.3335, 0.1921, 0.2634, 0.7227, 0.9813, 0.9825, 0.3249, 0.4792, 0.8177, 0.5693, 0.637, 0.8893, 0.4563, 0.5143, 0.9923, 0.5794, 0.2812, 0.7069, 0.7462, 0.2624, 0.1321, 0.8927, 0.24, 0.8146, 0.6029, 0.6188, 0.5568, 0.5386, 0.4458, 0.6174, 0.5515, 0.4334, 0.5418, 0.0745, 0.2486, 0.9481, 0.0669, 0.4761, 0.735, 0.0291, 0.1309, 0.0528, 0.6772, 0.6493, 0.453, 0.6771, 0.2499, 0.0304, 0.9299, 0.2165, 0.4413, 0.1447, 0.2349, 0.9837, 0.5783, 0.7172, 0.2706, 0.0397, 0.8707, 0.1544, 0.6561, 0.4148, 0.5885, 0.0642, 0.3256, 0.6253, 0.9933, 0.3753, 0.5002, 0.5547, 0.6575, 0.3762, 0.301, 0.7024, 0.2741, 0.8635, 0.3803, 0.7062, 0.5618, 0.3857, 0.4119, 0.909, 0.1272, 0.5379, 0.6174, 0.7564, 0.2704, 0.9172, 0.6534, 0.3525, 0.6119, 0.584, 0.5831, 0.8075, 0.1001, 0.4865, 0.967, 0.0201, 0.2942, 0.8439, 0.1245, 0.6441, 0.2435, 0.3135, 0.5573, 0.9396, 0.5745, 0.4632, 0.2739, 0.6609, 0.5236, 0.7736, 0.5084, 0.8295, 0.4653, 0.7433, 0.7567, 0.8467, 0.1987, 0.6343, 0.3718, 0.9816, 0.5531, 0.7362, 0.5795, 0.204, 0.2176, 0.1654, 0.0067, 0.1204, 0.4307, 0.469, 0.7182, 0.739, 0.6454, 0.248, 0.2229, 0.9907, 0.5577, 0.9503, 0.4821, 0.0028, 0.011, 0.4209, 0.2928, 0.6199, 0.0958, 0.9077, 0.6117, 0.4038, 0.1836, 0.1151, 0.5332, 0.2937, 0.9954, 0.9618, 0.7691, 0.967, 0.0066, 0.1285, 0.8266, 0.8844, 0.2653, 0.8183, 0.2644, 0.0895, 0.8603, 0.0943, 0.6173, 0.384, 0.3009, 0.4981, 0.8971, 0.1443, 0.7896, 0.6392, 0.9098, 0.9432, 0.1676, 0.7013, 0.9248, 0.3633, 0.8517, 0.5437, 0.6143, 0.9232, 0.718, 0.1841, 0.1486, 0.1476, 0.5599, 0.6785, 0.5836, 0.7606, 0.2959, 0.7918, 0.9491, 0.5689, 0.7934, 0.3661, 0.5916, 0.8498, 0.4036, 0.5359, 0.3207, 0.3537, 0.9639, 0.2713, 0.9222, 0.164, 0.0888, 0.6877, 0.8012, 0.8075, 0.2065, 0.6667, 0.6959, 0.8648, 0.8484, 0.7207, 0.3117, 0.6946, 0.34, 0.0329, 0.7655, 0.1772, 0.7876, 0.8954, 0.1032, 0.7802, 0.4554, 0.3787, 0.2142, 0.875, 0.749, 0.5368, 0.5724, 0.9143, 0.897, 0.2774, 0.6579, 0.9233, 0.6918, 0.8404, 0.0018, 0.9593, 0.9315, 0.7745, 0.302, 0.2803, 0.5312, 0.0497, 0.8411, 0.2751, 0.8147, 0.4537, 0.9283, 0.307, 0.4122, 0.4081, 0.1546, 0.9116, 0.4722, 0.3131, 0.8874, 0.2476, 0.8048, 0.6543, 0.5531, 0.8991, 0.6308, 0.7485, 0.5444, 0.55, 0.0307, 0.4792, 0.572, 0.0019, 0.1539, 0.5685, 0.6094, 0.16, 0.3153, 0.9141, 0.4176, 0.6933, 0.6559, 0.5257, 0.4371, 0.6225, 0.2483, 0.8696, 0.3918, 0.5931, 0.0613, 0.1066, 0.2545, 0.8322, 0.1569, 0.1608, 0.2491, 0.5444, 0.6056, 0.2333, 0.8697, 0.0161, 0.6092, 0.1695, 0.3299, 0.159, 0.957, 0.7588, 0.6691, 0.0266, 0.4157, 0.8444, 0.7525, 0.1081, 0.1012, 0.6508, 0.6907, 0.9478, 0.985, 0.1016, 0.9117, 0.6937, 0.8388, 0.1131, 0.6882, 0.9956, 0.9438, 0.574, 0.9841, 0.3046, 0.5318, 0.4852, 0.6573, 0.3999, 0.0218, 0.7027, 0.5587, 0.7406, 0.5245, 0.0841, 0.301, 0.3934, 0.3549, 0.193, 0.3165, 0.911, 0.3946, 0.7623, 0.9258, 0.1397, 0.9489, 0.621, 0.5215, 0.6565, 0.6513, 0.1031, 0.9885, 0.5231, 0.9804, 0.7191, 0.0522, 0.5507, 0.0966, 0.2564, 0.784, 0.6126, 0.3353, 0.4782, 0.8266, 0.1913, 0.1659, 0.7175, 0.8281, 0.7922, 0.7413, 0.8904, 0.248, 0.027, 0.969, 0.5109, 0.2786, 0.613, 0.5573, 0.9751, 0.8157, 0.2826, 0.251, 0.7141, 0.4405, 0.785, 0.777, 0.176, 0.6522, 0.5105, 0.2832, 0.8899, 0.8298, 0.9926, 0.7873, 0.6415, 0.9856, 0.0499, 0.2572, 0.511, 0.2887, 0.3599, 0.3851, 0.5212, 0.8157, 0.4591, 0.3512, 0.7473, 0.1758, 0.1421, 0.8162, 0.6903, 0.7904, 0.311, 0.7288, 0.1064, 0.5157, 0.5962, 0.4118, 0.2567, 0.8191, 0.4988, 0.9535, 0.4181, 0.3669, 0.7419, 0.1562, 0.9908, 0.1223, 0.492, 0.2416, 0.1021, 0.7141, 0.7271, 0.3157, 0.4743, 0.8248, 0.5157, 0.0842, 0.473, 0.0191, 0.9101, 0.4274, 0.6728, 0.0031, 0.3713, 0.2753, 0.1067, 0.1438, 0.7435, 0.7562, 0.8401, 0.9144, 0.1029, 0.4835, 0.8474, 0.3003, 0.5734, 0.123, 0.4025, 0.7645, 0.7659, 0.3563, 0.8602, 0.3019, 0.747, 0.6037, 0.6395, 0.2063, 0.2944, 0.0631, 0.7838, 0.6975, 0.8051, 0.15, 0.1287, 0.3248, 0.3405, 0.269, 0.8417, 0.8677, 0.3381, 0.9336, 0.9582, 0.8318, 0.1485, 0.7616, 0.344, 0.873, 0.0778, 0.1177, 0.7046, 0.0347, 0.4492, 0.556, 0.3412, 0.0636, 0.0074, 0.7801, 0.2852, 0.808, 0.0939, 0.4136, 0.7678, 0.6852, 0.019, 0.6359, 0.3155, 0.0937, 0.3417, 0.2259, 0.6332, 0.1064, 0.9967, 0.0097, 0.8877, 0.1404, 0.7183, 0.9019, 0.4917, 0.5865, 0.4992, 0.7495, 0.9961, 0.4307, 0.2895, 0.4554, 0.3861, 0.5808, 0.793, 0.342, 0.0495, 0.5022, 0.9668, 0.5549, 0.1227, 0.9522, 0.5922, 0.6862, 0.3992, 0.3131, 0.8107, 0.4828, 0.8474, 0.8602, 0.5191, 0.462, 0.4917, 0.9064, 0.3891, 0.5415, 0.1189, 0.7475, 0.9361, 0.4633, 0.5353, 0.3942, 0.8641, 0.8944, 0.9553, 0.9782, 0.502, 0.7522, 0.6417, 0.98, 0.4322, 0.3536, 0.3704, 0.6315, 0.2513, 0.4216, 0.0112, 0.692, 0.7666, 0.1003, 0.1272, 0.1206, 0.7836, 0.0342, 0.251, 0.7956, 0.4876, 0.1245, 0.6, 0.4447, 0.7672, 0.832, 0.8687, 0.9315, 0.9705, 0.7095, 0.3672, 0.3318, 0.4658, 0.1422, 0.5459, 0.803, 0.9702, 0.3183, 0.2882, 0.4343, 0.2967, 0.3614, 0.1388, 0.5211, 0.3418, 0.8088, 0.8811, 0.5475, 0.6047, 0.1272, 0.0525, 0.8539, 0.3288, 0.6992, 0.3916, 0.3803, 0.7232, 0.5137, 0.6269, 0.9861, 0.5106, 0.5996, 0.4013, 0.1381, 0.3951, 0.8116, 0.6964, 0.6424, 0.9335, 0.1375, 0.7322, 0.8862, 0.8254, 0.4835, 0.2099, 0.7876, 0.9766, 0.9241, 0.7909, 0.976, 0.7378, 0.1266, 0.7783, 0.2366, 0.5529, 0.7416, 0.9824, 0.0645, 0.2195, 0.8356, 0.4758, 0.4712, 0.8006, 0.0339, 0.8292, 0.9143, 0.8399, 0.3635, 0.7066, 0.4386, 0.583, 0.6405, 0.0018, 0.4715, 0.2374, 0.3867, 0.3746, 0.0268, 0.108, 0.0363, 0.9077, 0.7872, 0.1381, 0.9751, 0.6017, 0.0732, 0.1464, 0.9344, 0.5351, 0.3699, 0.2032, 0.2702, 0.6277, 0.5071, 0.0386, 0.0034, 0.1846, 0.5156, 0.2264, 0.1239, 0.9092, 0.0505, 0.1484, 0.9833, 0.865, 0.1494, 0.2788, 0.9836, 0.7682, 0.0408, 0.6195, 0.1621, 0.4758, 0.813, 0.2233, 0.9687, 0.8745, 0.0503, 0.0458, 0.419, 0.1564, 0.3162, 0.0655, 0.4486, 0.8514, 0.4246, 0.9518, 0.9124, 0.9087, 0.8365, 0.7821, 0.2402, 0.167, 0.2259, 0.5035, 0.5984, 0.9739, 0.5917, 0.1991, 0.3121, 0.424]
# ans = []

# for alpha in alphas:
#     circuit_components = [potentiometer(6000, alpha, "power", "out", "gnd", "i1", "i2")] 
#     circuit_components.append(Resistor(13000, "power", "out", "i3"))
#     circuit_components.append(Resistor(13000, "out", "gnd", "i4"))
#     circuit_components.append(VSrc(13, "power", "gnd", "i9"))
#     res = solve_circuit(circuit_components, "gnd")
#     ans.append(res["out"])

# print(ans)


#################

class VoltageSensor(OnePort):
    def __init__(self, e1, e2, i):
        OnePort.__init__(self,e1,e2,i)
        self.equation = [(1, i)]

class VCVS(OnePort):
    def __init__(self, sensor, e1, e2, i, K=1000000):
        OnePort.__init__(self,e1,e2,i)
        self.equation = [(-K, sensor.e1)]
        self.equation.append((K, sensor.e2))
        self.equation.append((1, e1))
        self.equation.append((-1, e2))

def op_amp(ea1, ea2, Ia, eb1, eb2, Ib, K=1000000):
    vs = VoltageSensor(ea1, ea2, Ia)
    vcvs = VCVS(vs, eb1, eb2, Ib, K)
    return [vs, vcvs]

# circuit_components = op_amp("gnd", "minus1", "i0", "transamp_out", "gnd", "i1")
# circuit_components.append(Resistor(12000000, "minus1", "transamp_out", "i2"))
# circuit_components.append(ISrc(920*10**-12, "minus1", "gnd", "i3"))
# circuit_components.append(Resistor(1900, "transamp_out", "minus2", "i4"))
# circuit_components.append(op_amp("gnd", "minus2", "i5", "v_out", "gnd", "i6"))
# circuit_components.append(Resistor(190000, "minus2", "v_out", "i7"))

# ans = solve_circuit(circuit_components, "gnd")
# #print(ans["i7"]*1000000)
# #print(ans["minus2"]*1000000)
# #print(ans["i1"]*1000000)

class Thevenin(OnePort):
    def __init__(self, v, r, e1, e2, i):
        OnePort.__init__(self,e1,e2,i)
        self.equation = [(1, e1), (-1, e2), (-r, i), (-v, None)]



